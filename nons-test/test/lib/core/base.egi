;;
;; Matchers
;;
assert("bool's value pattern",
  match (#t, #f) as (bool, bool)
  | (#t, #f) -> #t
  | _ -> #f)

assert("char's value pattern",
  match c#a as char
  | c#a -> #t
  | _ -> #f)

assert("integer's value pattern",
  match 10 as integer
  | 10 -> #t
  | _ -> #f)

assert("float's value pattern",
  match 0.1 as float
  | 0.1 -> #t
  | _ -> #f)

;;
;; Utility
;;
assertEqual("id",
  id(1),
  1)

assertEqual("fst",
  fst((1, 2)),
  1)

assertEqual("snd",
  snd((1, 2)),
  2)

assertEqual("compose - case 1",
  compose(fst, snd)(((1, 2), 3)),
  2)

assertEqual("compose - case 2",
  compose(fst, snd, fst)((1, (2, 3)), 4),
  2)

; assertEqual("eq?/m",
;   eq?/m(integer, 1, 1),
;   #t)

;;
;; Booleans
;;
assertEqual("and",
  [#t && #t, #t && #f, #f && #t, #f && #f],
  [#t, #f, #f, #f])

assertEqual("or",
  [#t || #t, #t || #f, #f || #t, #f || #f],
  [#t, #t, #t, #f])

assertEqual("not",
  [not #t, not #f],
  [#f, #t])
