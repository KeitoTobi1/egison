--
-- This file has been auto-generated by egison-translator.
--

∂/∂ f *x :=
  match f as mathExpr with
    | #x -> 1
    | ?symbol? -> 0
    | func _ $argnames $args _ ->
      sum (map2 (\s r -> (userRefs f [s]) * ∂/∂ r x) argnames args)
    | REPLACEME -> exp g * ∂/∂ g x
    | REPLACEME -> 1 / g * ∂/∂ g x
    | REPLACEME -> 1 / (2 * sqrt g) * ∂/∂ g x
    | REPLACEME -> f * ∂/∂ (log g * h) x
    | REPLACEME -> (- sin g) * ∂/∂ g x
    | REPLACEME -> cos g * ∂/∂ g x
    | REPLACEME -> 1 / sqrt (1 - g ^ 2) * ∂/∂ g x
    | apply $g $args ->
      sum (map 2#(capply `(userRefs g [%1]) args * ∂/∂ %2 x) (zip nats args))
    | quote $g ->
      let g' := ∂/∂ g x
       in if monomial? g'
            then g'
            else let d := capply gcd (fromPoly g')
                  in *' d '(mapPoly 1#(/' %1 d) g')
    | #0 -> 0
    | REPLACEME -> 0
    | REPLACEME -> n * fx ^ (n - 1) * ∂/∂ fx x
    | REPLACEME -> a * ∂/∂ (**' fx n) x * r + a * **' fx n * ∂/∂ r x
    | poly $ts -> sum (map 1#(∂/∂ %1 x) ts)
    | REPLACEME ->
      let p1' := ∂/∂ p1 x
          p2' := ∂/∂ p2 x
       in (p1' * p2 - p2' * p1) / p2 ^ 2

d/d := ∂/∂

pd/pd := ∂/∂

∇ := ∂/∂

nabla := ∇

grad := ∇

taylorExpansion f x a := multivariateTaylorExpansion f [|x|] [|a|]

maclaurinExpansion := 2#(taylorExpansion %1 %2 0)

multivariateTaylorExpansion %f %xs %as :=
  withSymbols [h] let hs := generateTensor 1#h_%1 tensorShape xs
                   in map2
                        (*)
                        (map 1#(1 / fact %1) nats0)
                        (map
                           (compose
                              1#(V.substitute xs as %1)
                              1#(V.substitute
                                   hs
                                   (withSymbols [i] xs_i - as_i)
                                   %1))
                           (iterate (compose 1#(∇ %1 xs) 1#(V.* hs %1)) f))

multivariateMaclaurinExpansion %f %xs :=
  multivariateTaylorExpansion f xs REPLACEME

addUserScript f i :=
  let (g, is) := deconsUserScripts f
   in appendUserScripts g (sort (is ++ [i]))
