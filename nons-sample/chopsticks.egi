tree a := matcher
  | node $ $ as (a, multiset (tree a)) with
    | Node $x $ts -> [(x, ts)]
  | $ as something with
    | $tgt -> [tgt]

hand := (integer, multiset integer, multiset integer)

step s := matchAllDFS s as (integer, list integer, list integer) with
  | (#1, $hs ++ $x :: (!(_ ++ #x :: _) & $ts), $hs' ++ (?(\y -> x + y < 6) & $y) :: (!(_ ++ #y :: _) & $ts')) -> (2, hs ++ x :: ts, hs' ++ x + y :: ts')
  | (#1, $hs ++ $x :: (!(_ ++ #x :: _) & $ts), ?(\y -> x + y > 5) :: []) -> (-1, hs ++ x :: ts, [])
  | (#1, $hs ++ $x :: (!(_ ++ #x :: _) & $ts), (!(_ :: []) & $hs' ++ (?(\y -> x + y > 5) & $y) :: (!(_ ++ #y :: _) & $ts'))) -> (2, hs ++ x :: ts, hs' ++ ts')
  | (#2, $hs ++ $x :: (!(_ ++ #x :: _) & $ts), $hs' ++ (?(\y -> x + y < 6) & $y) :: (!(_ ++ #y :: _) & $ts')) -> (1, hs ++ x + y :: ts, hs' ++ y :: ts')
  | (#2, $x :: [], $hs' ++ (?(\y -> x + y > 5) & $y) :: (!(_ ++ #y :: _) & $ts')) -> (-2, [], hs' ++ y :: ts')
  | (#2, (!(_ :: []) & $hs ++ $x :: (!(_ ++ #x :: _) & $ts)), $hs' ++ (?(\y -> x + y > 5) & $y) :: (!(_ ++ #y :: _) & $ts')) -> (1, hs ++ ts, hs' ++ y :: ts')

--concat (map step (concat (map step' (step ([1,1],[1,1])))))
--concat (map step' (concat (map step (concat (map step' (step ([1,1],[1,1])))))))

init := (1, [1,1], [1,1])

makeTree x := Node x (map makeTree (step x))

--matchAllDFS makeTree init as tree hand with
--| node $x_1 ((node $x_2 ((node $x_3 _) :: _)) :: _)
---> (x_1, x_2, x_3)

topTree n :=
  matchAllDFS makeTree init as tree hand with
  | loop $i (1, n)
      (node $x_i (... :: _))
      _
  -> map (\i -> x_i) [1..n]

--io (each (compose show print) (topTree 5))

paths :=
  matchAllDFS makeTree init as tree hand with
  | loop $i (1, $n)
      (node $x_i (... :: _))
      (node $x_(n + 1) [])
  -> map (\i -> x_i) [1..(n + 1)]

io (each (compose show print) paths)
