(define $delete-literal
  (lambda [$l $cnf]
    (map (lambda [$c] (match-all c (multiset integer)
                        [<cons (and !,l $x) _> x]))
         cnf)))

(define $delete-clauses-with
  (lambda [$l $cnf]
    (match-all cnf (multiset (multiset integer))
      [<cons (& !<cons ,l _> $c) _> c])))

(define $assign-true
  (lambda [$l $cnf]
    (delete-literal (neg l) (delete-clauses-with l cnf))))

(define $assignment
  (algebraic-data-matcher
    {<deduced integer> <guessed integer something something>}))

(define $dpll'
  (lambda [$vars $cnf $trail]
    (match [vars cnf] [(multiset integer) (multiset (multiset integer))]
      {[[_ <nil>] #t]
       [[_ <cons <nil> _>]
        (match trail (list assignment)
          {[<join _ <cons <guessed $l $vars' $cnf'> $trail'>>
            (dpll' vars' (assign-true (neg l) cnf') {<Deduced (neg l)> @trail'})]
           [_ #f]})]
       [[_ <cons <cons $l <nil>> _>] (dpll' (delete (abs l) vars) (assign-true l cnf) {<Deduced l> @trail})]
       [[<cons $v $vs> !<cons <cons ,(neg v) _> _>] (dpll' vs (assign-true v cnf) {<Deduced v> @trail})]
       [[<cons $v $vs> !<cons <cons ,v _> _>] (dpll' vs (assign-true (neg v) cnf) {<Deduced (neg v)> @trail})]
       [[<cons $v $vs> _] (dpll' vs (assign-true v cnf) {<Guessed v vs cnf> @trail})]
       })))

(define $dpll
  (lambda [$vars $cnf]
    (dpll' vars cnf {})))

"dpll start"
(dpll {1} {{1}}) ; #t
(dpll {1} {{1} {-1}}) ; #f
(dpll {1 2 3} {{1 2} {-1 3} {1 -3}}) ; #t
(dpll {1 2} {{1 2} {-1 -2} {1 -2}}) ; #t
(dpll {1 2} {{1 2} {-1 -2} {1 -2} {-1 2}}) ; #f
(dpll {1 2 3 4 5} {{-1 -2 3} {-1 -2 -3} {1 2 3 4} {-4 -2 3} {5 1 2 -3} {-3 1 -5} {1 -2 3 4} {1 -2 -3 5}}) ; #f
(dpll {1 2} {{-1 -2} {1}}) ; #t
"dpll end"
